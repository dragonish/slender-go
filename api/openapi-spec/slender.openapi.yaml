openapi: 3.0.1
info:
  title: slender
  description: ''
  version: 1.0.0
tags:
  - name: icon
  - name: login
  - name: html
  - name: file
  - name: admin
  - name: bookmark
  - name: folder
  - name: config
  - name: about
paths:
  /api/v1/icons:
    get:
      summary: get icons list
      deprecated: false
      description: ''
      tags:
        - icon
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
  /api/v1/logins:
    get:
      summary: get login list
      deprecated: false
      description: ''
      tags:
        - login
      parameters:
        - name: page
          in: query
          description: number of pages.
          required: false
          example: '1'
          schema:
            type: integer
        - name: size
          in: query
          description: size per page.
          required: false
          example: '25'
          schema:
            type: integer
        - name: order
          in: query
          description: sort condition. ["login-time"]
          required: false
          example: login-time
          schema:
            type: string
        - name: ip
          in: query
          description: ''
          required: false
          schema:
            type: string
        - name: ua
          in: query
          description: ''
          required: false
          schema:
            type: string
        - name: admin
          in: query
          description: ''
          required: false
          schema:
            type: string
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/LoginListData'
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
    delete:
      summary: clear login log
      deprecated: false
      description: ''
      tags:
        - login
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                properties: {}
                required:
                  - 01HPRQXDG43QDPJJNY8QX8STMJ
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
    post:
      summary: logout all users
      deprecated: false
      description: ''
      tags:
        - login
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                properties: {}
                required:
                  - 01HPRQXDG43QDPJJNY8QX8STMJ
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
  /login:
    get:
      summary: login
      deprecated: false
      description: ''
      tags:
        - html
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                properties:
                  data:
                    type: string
                required:
                  - data
        '303':
          description: See Other
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties:
                  data:
                    type: string
                required:
                  - data
      security: []
    post:
      summary: login
      deprecated: false
      description: ''
      tags:
        - html
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        '303':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                properties:
                  data:
                    type: string
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                title: ''
                type: object
                properties:
                  message:
                    type: string
                    description: description
                required:
                  - message
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                title: ''
                type: object
                properties:
                  message:
                    type: string
                    description: description
                required:
                  - message
      security: []
  /api/v1/files:
    post:
      summary: upload file
      deprecated: false
      description: ''
      tags:
        - file
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: &ref_2
                    $ref: '#/components/schemas/FileBaseData'
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
    get:
      summary: get file list
      deprecated: false
      description: ''
      tags:
        - file
      parameters:
        - name: page
          in: query
          description: number of pages.
          required: false
          example: '1'
          schema:
            type: integer
        - name: size
          in: query
          description: size per page.
          required: false
          example: '25'
          schema:
            type: integer
        - name: path
          in: query
          description: ''
          required: false
          schema:
            type: string
        - name: use
          in: query
          description: ''
          required: false
          schema:
            type: string
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FileListData'
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
    delete:
      summary: remove all unused files
      deprecated: false
      description: ''
      tags:
        - file
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                properties: {}
                required:
                  - 01HPRQXDG43QDPJJNY8QX8STMJ
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
  /api/v1/admin:
    post:
      summary: request administrator status
      deprecated: false
      description: ''
      tags:
        - admin
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                required:
                  - data
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                properties: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
  /api/v1/bookmarks:
    post:
      summary: import bookmarks
      deprecated: false
      description: ''
      tags:
        - bookmark
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BookmarkImportItem'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: integer
                required:
                  - data
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
    get:
      summary: get bookmark list
      deprecated: false
      description: ''
      tags:
        - bookmark
      parameters:
        - name: page
          in: query
          description: number of pages.
          required: false
          example: '1'
          schema:
            type: integer
        - name: size
          in: query
          description: size per page.
          required: false
          example: '25'
          schema:
            type: integer
        - name: order
          in: query
          description: >-
            sort condition. ["created-time", "modified-time", "visits",
            "folder-weight", "weight"]
          required: false
          example: ''
          schema:
            type: string
        - name: privacy
          in: query
          description: ''
          required: false
          example: ''
          schema:
            type: string
        - name: name
          in: query
          description: ''
          required: false
          example: ''
          schema:
            type: string
        - name: description
          in: query
          description: ''
          required: false
          example: ''
          schema:
            type: string
        - name: url
          in: query
          description: ''
          required: false
          schema:
            type: string
        - name: folder
          in: query
          description: ''
          required: false
          schema:
            type: integer
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BookmarkListData'
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
    patch:
      summary: handle bookmark in batches
      deprecated: false
      description: >-
        action: "delete" | "setPrivacy" | "setWeight" | "incWeight" |
        "clearVisits" | "setFolder"
      tags:
        - bookmark
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema: &ref_0
              $ref: '#/components/schemas/BatchPatchBody'
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                properties: {}
                required:
                  - 01HPRQXDG43QDPJJNY8QX8STMJ
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
  /api/v1/folders:
    post:
      summary: add folder
      deprecated: false
      description: ''
      tags:
        - folder
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderPostBody'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: integer
                required:
                  - data
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
    get:
      summary: get folder list
      deprecated: false
      description: ''
      tags:
        - folder
      parameters:
        - name: page
          in: query
          description: number of pages.
          required: false
          example: '1'
          schema:
            type: integer
            format: uint
        - name: size
          in: query
          description: size per page.
          required: false
          example: '25'
          schema:
            type: integer
            format: uint
        - name: order
          in: query
          description: >-
            sort condition. ["created-time", "modified-time", "bookmark-total",
            "weight"]
          required: false
          example: ''
          schema:
            type: string
        - name: privacy
          in: query
          description: ''
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: ''
          required: false
          schema:
            type: string
        - name: description
          in: query
          description: ''
          required: false
          schema:
            type: string
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FolderListData'
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
    patch:
      summary: handle folder in batches
      deprecated: false
      description: 'action: "delete" | "setLarge" | "setPrivacy" | "setWeight" | "incWeight"'
      tags:
        - folder
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema: *ref_0
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                properties: {}
                required:
                  - 01HPRQXDG43QDPJJNY8QX8STMJ
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
  /api/v1/config:
    get:
      summary: get config
      deprecated: false
      description: ''
      tags:
        - config
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: &ref_1
                    $ref: '#/components/schemas/UserConfig'
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
    put:
      summary: update config
      deprecated: false
      description: ''
      tags:
        - config
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema: *ref_1
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                properties: {}
                required:
                  - 01HPRQXDG43QDPJJNY8QX8STMJ
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
    patch:
      summary: patch update config
      deprecated: false
      description: ''
      tags:
        - config
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigPatchBody'
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                properties: {}
                required:
                  - 01HPRQXDG43QDPJJNY8QX8STMJ
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
  /api/v1/about/info:
    get:
      summary: get program info
      deprecated: false
      description: ''
      tags:
        - about
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AboutInfoData'
                required:
                  - data
      security: []
  /api/v1/list/folders:
    get:
      summary: get base folder list
      deprecated: false
      description: ''
      tags:
        - folder
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BookmarkFolderInfo'
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
  /manager:
    get:
      summary: manager
      deprecated: false
      description: ''
      tags:
        - html
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                properties:
                  data:
                    type: string
                required:
                  - data
        '303':
          description: See Other
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties:
                  data:
                    type: string
                required:
                  - data
      security: []
  /admin:
    get:
      summary: admin
      deprecated: false
      description: ''
      tags:
        - html
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                properties:
                  data:
                    type: string
                required:
                  - data
        '303':
          description: See Other
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties:
                  data:
                    type: string
                required:
                  - data
      security: []
    post:
      summary: admin
      deprecated: false
      description: ''
      tags:
        - html
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        '303':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                properties:
                  data:
                    type: string
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                title: ''
                type: object
                properties:
                  message:
                    type: string
                    description: description
                required:
                  - message
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                title: ''
                type: object
                properties:
                  message:
                    type: string
                    description: description
                required:
                  - message
      security: []
  /api/v1/about/icons:
    get:
      summary: get icons info
      deprecated: false
      description: ''
      tags:
        - about
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AboutIconsData'
                required:
                  - data
      security: []
  /api/v1/files/{id}:
    delete:
      summary: delete file
      deprecated: false
      description: ''
      tags:
        - file
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
        - name: force
          in: query
          description: force deletion
          required: false
          schema:
            type: string
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                properties: {}
                required:
                  - 01HPRQXDG43QDPJJNY8QX8STMJ
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
  /:
    get:
      summary: home
      deprecated: false
      description: ''
      tags:
        - html
      parameters:
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: description
                required:
                  - 01HPRQXDG43QDPJJNY8QX8STMJ
                  - message
        '303':
          description: See Other
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties:
                  data:
                    type: string
                required:
                  - data
      security: []
  /api/v1/folders/{id}:
    get:
      summary: get folder
      deprecated: false
      description: ''
      tags:
        - folder
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          example: '1'
          schema:
            type: integer
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FolderBaseData'
                required:
                  - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
    patch:
      summary: update folder
      deprecated: false
      description: ''
      tags:
        - folder
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          example: '1'
          schema:
            type: integer
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderPatchBody'
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                properties: {}
                required:
                  - 01HPRQXDG43QDPJJNY8QX8STMJ
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
    delete:
      summary: delete folder
      deprecated: false
      description: ''
      tags:
        - folder
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                properties: {}
                required:
                  - 01HPRQXDG43QDPJJNY8QX8STMJ
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
  /api/v1/bookmarks/{id}:
    get:
      summary: get bookmark
      deprecated: false
      description: ''
      tags:
        - bookmark
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          example: '1'
          schema:
            type: integer
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BookmarkResData'
                required:
                  - data
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
    patch:
      summary: update bookmark
      deprecated: false
      description: ''
      tags:
        - bookmark
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          example: '1'
          schema:
            type: integer
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkPatchBody'
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                properties: {}
                required:
                  - 01HPRQXDG43QDPJJNY8QX8STMJ
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
    delete:
      summary: delete bookmark
      deprecated: false
      description: ''
      tags:
        - bookmark
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          example: '1'
          schema:
            type: integer
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                properties: {}
                required:
                  - 01HPRQXDG43QDPJJNY8QX8STMJ
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
  /api/v1/bookmarks/{id}/visits:
    post:
      summary: increase bookmark visits
      deprecated: false
      description: ''
      tags:
        - bookmark
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          example: '1'
          schema:
            type: integer
        - name: User-Agent
          in: header
          description: ''
          example: ''
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: ''
          example: ''
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                properties: {}
                required:
                  - 01HPRQXDG43QDPJJNY8QX8STMJ
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                title: ''
                type: object
                properties: {}
      security: []
components:
  schemas:
    AboutIconsData:
      type: object
      properties:
        mdiVersion:
          type: string
        siVersion:
          type: string
      description: defines icons info.
      required:
        - mdiVersion
        - siVersion
    AboutInfoData:
      type: object
      properties:
        version:
          type: string
        commit:
          type: string
        os:
          type: string
        arch:
          type: string
        buildDate:
          type: string
      description: defines program info.
      required:
        - version
        - commit
        - os
        - arch
        - buildDate
    FileListData:
      type: object
      properties:
        pageSize:
          type: integer
          description: size per page.
        pageNo:
          type: integer
          description: current page number.
        total:
          type: integer
        list:
          type: array
          items:
            $ref: '#/components/schemas/FileListItem'
      description: file list data.
      required:
        - list
        - pageSize
        - pageNo
        - total
    FileListItem:
      type: object
      properties:
        id:
          type: integer
        path:
          type: string
        used:
          type: boolean
      description: file list item.
      required:
        - used
        - id
        - path
    LoginListData:
      type: object
      properties:
        pageSize:
          type: integer
          description: size per page.
        pageNo:
          type: integer
          description: current page number.
        total:
          type: integer
        list:
          type: array
          items:
            $ref: '#/components/schemas/LoginListItem'
      description: login list data.
      required:
        - list
        - pageSize
        - pageNo
        - total
    LoginListItem:
      type: object
      properties:
        loginId:
          type: string
        loginTime:
          type: string
        ip:
          type: string
        ua:
          type: string
        isAdmin:
          type: boolean
      description: login list item.
      required:
        - loginId
        - loginTime
        - ip
        - ua
        - isAdmin
    BookmarkImportItem:
      type: object
      properties:
        url:
          type: string
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        privacy:
          type: boolean
        weight:
          type: integer
      description: import bookmark item.
      required:
        - url
        - name
        - description
        - icon
        - privacy
        - weight
    BatchPatchBody:
      type: object
      properties:
        dataSet:
          type: array
          items:
            type: integer
        action:
          type: string
        payload:
          type: string
      description: batch patch body.
      required:
        - dataSet
        - action
    ConfigPatchBody:
      type: object
      properties:
        title:
          type: string
          description: website title.
        customFooter:
          type: string
          description: custom footer.
        showSidebar:
          type: boolean
          description: show folders sidebar.
        showSearchInput:
          type: boolean
          description: show search input.
        showScrollTop:
          type: boolean
          description: show back to top button.
        showLatest:
          type: boolean
          description: show the module of latest added bookmarks.
        latestTotal:
          type: integer
          format: uint
          description: number of bookmarks in the latest module.
        showHot:
          type: boolean
          description: show the module of hot bookmarks.
        hotTotal:
          type: integer
          format: uint
          description: number of bookmarks in the hot module.
        useLetterIcon:
          type: boolean
          description: use first letter as icon.
        openInNewWindow:
          type: boolean
          description: always open the bookmark in the new window.
        encryptLink:
          type: boolean
          description: encrypt link.
      description: the user configuration field.
    BookmarkPatchBody:
      type: object
      properties:
        url:
          type: string
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        privacy:
          type: boolean
        weight:
          type: integer
        visits:
          type: integer
        folderId:
          type: integer
        files:
          type: array
          items:
            type: integer
      description: update bookmark body.
    BookmarkResData:
      type: object
      properties:
        id:
          type: integer
        url:
          type: string
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        privacy:
          type: boolean
        weight:
          type: integer
        createdTime:
          type: string
        modifiedTime:
          type: string
        visits:
          type: integer
        folderId:
          type: integer
        files:
          type: array
          items: *ref_2
          description: file list.
      description: bookmark response data.
      required:
        - files
        - id
        - url
        - name
        - description
        - icon
        - privacy
        - weight
        - createdTime
        - modifiedTime
        - visits
        - folderId
    BookmarkFolderInfo:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        privacy:
          type: boolean
      description: bookmark's folder info.
      required:
        - id
        - name
        - privacy
    FileBaseData:
      type: object
      properties:
        id:
          type: integer
        path:
          type: string
      description: file base data.
      required:
        - id
        - path
    BookmarkListData:
      type: object
      properties:
        pageSize:
          type: integer
          description: size per page.
        pageNo:
          type: integer
          description: current page number.
        total:
          type: integer
        list:
          type: array
          items:
            $ref: '#/components/schemas/BookmarkListItem'
          description: bookmark list.
      description: bookmark list data.
      required:
        - list
        - pageSize
        - pageNo
        - total
    BookmarkListItem:
      type: object
      properties:
        id:
          type: integer
        url:
          type: string
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        privacy:
          type: boolean
        weight:
          type: integer
        createdTime:
          type: string
        modifiedTime:
          type: string
        visits:
          type: integer
        folderId:
          type: integer
        folderName:
          type: string
          description: folder name.
      description: bookmark list item.
      required:
        - folderName
        - id
        - url
        - name
        - description
        - icon
        - privacy
        - weight
        - createdTime
        - modifiedTime
        - visits
        - folderId
    BookmarkBaseData:
      type: object
      properties:
        id:
          type: integer
        url:
          type: string
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        privacy:
          type: boolean
        weight:
          type: integer
        createdTime:
          type: string
        modifiedTime:
          type: string
        visits:
          type: integer
        folderId:
          type: integer
      description: bookmark base data.
      required:
        - id
        - url
        - name
        - description
        - icon
        - privacy
        - weight
        - createdTime
        - modifiedTime
        - visits
        - folderId
    BookmarkPostBody:
      type: object
      properties:
        url:
          type: string
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        privacy:
          type: boolean
        weight:
          type: integer
        folderId:
          type: integer
        files:
          type: array
          items:
            type: integer
      description: add bookmark body.
      required:
        - url
        - name
        - description
        - icon
        - privacy
        - weight
        - folderId
        - files
    FolderPatchBody:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        large:
          type: boolean
        privacy:
          type: boolean
        weight:
          type: integer
      description: update folder body.
    ListCondition:
      type: object
      properties:
        page:
          type: integer
          format: uint
          description: number of pages.
        size:
          type: integer
          format: uint
          description: size per page.
        order:
          type: string
          description: sort condition.
        privacy:
          type: boolean
      description: list conditon.
      required:
        - page
        - size
        - order
    BaseCondition:
      type: object
      properties:
        page:
          type: integer
          format: uint
          description: number of pages.
        size:
          type: integer
          format: uint
          description: size per page.
        order:
          type: string
          description: sort condition.
      description: base page condition.
      required:
        - page
        - size
        - order
    FolderListData:
      type: object
      properties:
        pageSize:
          type: integer
          description: size per page.
        pageNo:
          type: integer
          description: current page number.
        total:
          type: integer
        list:
          type: array
          items:
            $ref: '#/components/schemas/FolderListItem'
          description: folder list.
      description: folder list data.
      required:
        - list
        - pageSize
        - pageNo
        - total
    FolderListItem:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        large:
          type: boolean
        privacy:
          type: boolean
        weight:
          type: integer
        createdTime:
          type: string
        modifiedTime:
          type: string
        bookmarkTotal:
          type: integer
          description: total number of bookmarks included.
      description: folder list item.
      required:
        - bookmarkTotal
        - id
        - name
        - description
        - large
        - privacy
        - weight
        - createdTime
        - modifiedTime
    FolderBaseData:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        large:
          type: boolean
        privacy:
          type: boolean
        weight:
          type: integer
        createdTime:
          type: string
        modifiedTime:
          type: string
      description: folder base data.
      required:
        - id
        - name
        - description
        - large
        - privacy
        - weight
        - createdTime
        - modifiedTime
    PageData:
      type: object
      properties:
        pageSize:
          type: integer
          description: size per page.
        pageNo:
          type: integer
          description: current page number.
        total:
          type: integer
      description: page data.
      required:
        - pageSize
        - pageNo
        - total
    FolderPostBody:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        large:
          type: boolean
        privacy:
          type: boolean
        weight:
          type: integer
      description: add folder body.
      required:
        - name
        - description
        - large
        - privacy
        - weight
    UserConfig:
      type: object
      properties:
        title:
          type: string
          description: website title.
        customFooter:
          type: string
          description: custom footer.
        showSidebar:
          type: boolean
          description: show folders sidebar.
        showSearchInput:
          type: boolean
          description: show search input.
        showScrollTop:
          type: boolean
          description: show back to top button.
        showLatest:
          type: boolean
          description: show the module of latest added bookmarks.
        latestTotal:
          type: integer
          format: uint
          description: number of bookmarks in the latest module.
        showHot:
          type: boolean
          description: show the module of hot bookmarks.
        hotTotal:
          type: integer
          format: uint
          description: number of bookmarks in the hot module.
        useLetterIcon:
          type: boolean
          description: use first letter as icon.
        openInNewWindow:
          type: boolean
          description: always open the bookmark in the new window.
        encryptLink:
          type: boolean
          description: encrypt link.
      description: the user configuration field.
      required:
        - title
        - customFooter
        - showSidebar
        - showSearchInput
        - showScrollTop
        - showLatest
        - latestTotal
        - showHot
        - hotTotal
        - useLetterIcon
        - openInNewWindow
        - encryptLink
    DefaultResModel:
      type: object
      properties:
        message:
          type: string
          description: description
      required:
        - message
  securitySchemes: {}
servers: []
